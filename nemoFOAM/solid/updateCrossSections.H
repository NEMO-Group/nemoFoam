{
if (Debug)  {Info << "\n\nupdateCrossSection: START " << endl;}

  for(label ii = 0; ii<nEnergyGroupsInit; ii++)
    {
	label posEqn = ii + i*nEnergyGroupsInit;

		if (Debug)  {Info << "\n - i:" << i << ", region is: " << solidRegions[i].name() << ", ii is:" << ii << endl ; }

     //Evaluate temperature- and density-dependent nuclear properties only if required in nuclearPropertiesDict
	if (DopplerControl[i].value()==1)
	{
		volScalarField rhoNorm = unitField[i];
			if (Debug)  {Info << "\n --- rhoNorm = unitField[" << i << "]"<< endl ; }

		volScalarField logT = zeroField[i] * dimensionedScalar("",dimless,0);
			if (Debug)  {Info << "\n --- logT = zeroField[" << i << "]"<< endl ; }

		//rhok = 1.0 - beta*(T - TRef);

	       rhoNorm = rho[i]/rhoRefXS[i];
			if (Debug)  {Info << "\n --- rhoNorm = rho[" << i << "] / rhoRefXS[" << i << "]" << endl ; }

	       logT = log(max(0.5, T[i]/TRefXS[i]));
			if (Debug)  {Info << "\n --- logT = log(max(0.5, T[" << i << "] / TRefXS[" << i << "]))"<< endl ; }

	//     D[ii] = (D_ref[ii] + DopplerControl*alphaD_ref[ii]*logT)/rhoNorm;
	       D[posEqn] = (D_ref[posEqn] + DopplerControl[i] * alphaD_ref[posEqn] * logT) / rhoNorm;
			if (Debug)  {Info << "\n --- D[" << posEqn << "] = (D_ref[" << posEqn << "] +  DopplerControl[" << i << "] *  alphaD_ref[" << posEqn << "] * logT) / rhoNorm" << endl ; }

	       Stot[posEqn] = (Stot_ref[posEqn] + DopplerControl[i] * alphaStot_ref[posEqn] * logT) * rhoNorm;
			if (Debug)  {Info << "\n --- Stot[" << posEqn << "] = (Stot_ref[" << posEqn << "] +  DopplerControl[" << i << "] *  alphaStot_ref[" << posEqn << "] * logT) * rhoNorm" << endl ; }

	//     Sa[ii] = (Sa_ref[ii] + DopplerControl*alphaSa_ref[ii]*logT)*rhoNorm;
	       Sa[posEqn] = (Sa_ref[posEqn] + DopplerControl[i] * alphaSa_ref[posEqn] * logT) * rhoNorm;
			if (Debug)  {Info << "\n --- Sa[" << posEqn << "] = (Sa_ref[" << posEqn << "] +  DopplerControl[" << i << "] *  alphaSa_ref[" << posEqn << "] * logT) * rhoNorm" << endl ; }

	//     Sf[ii] = (1/Keff)*(Sf_ref[ii] + DopplerControl*alphaSf_ref[ii]*logT)*rhoNorm;
	       Sf[posEqn] = (Sf_ref[posEqn] + DopplerControl[i] * alphaSf_ref[posEqn] * logT) * rhoNorm;// *(1/Keff)
			if (Debug)  {Info << "\n --- Sf[" << posEqn << "] = (Sf_ref[" << posEqn << "] +  DopplerControl[" << i << "] *  alphaSf_ref[" << posEqn << "] * logT) * rhoNorm \n" << endl ; }

		label RegionIndex = nEnergyGroupsInit*nEnergyGroupsInit*i;
		label EnergyIndex = nEnergyGroupsInit*ii;

		for( label ll = 0; ll<nEnergyGroupsInit ; ll++)
		{
			label Index = ll + EnergyIndex + RegionIndex;
			Ss[Index] = ( Ss_ref[Index] + DopplerControl[i] * alphaSs_ref[Index] * logT ) * rhoNorm;
				if (Debug)  {Info << " --- Ss[" << Index << "] = (Ss_ref[" << Index << "] +  DopplerControl[" << i << "] *  alphaSs_ref[" << Index << "] * logT) * rhoNorm" << endl ; }

		}
	}

  volScalarField Ssi = zeroField[i]*dimensionedScalar("", dimless/dimLength, 0);
	if (Debug)  {Info << "\n --- Ssi = zeroField[" << i << "] \n" <<  endl ;}
	if (Debug)  {Info << "\n --- Ssi = " << Ssi <<  endl ;}

   for(label ll = 0; ll<nEnergyGroupsInit; ll++)
     {

       label RegionIndex = i*nEnergyGroupsInit*nEnergyGroupsInit;
       label EnergyIndex = ii*nEnergyGroupsInit;

       if (ll!=ii)
       {
          Ssi += Ss[RegionIndex+EnergyIndex+ll];
		        if (Debug)  {Info << " --- SSi += Ss[ " << RegionIndex+EnergyIndex+ll << "]" << endl ;}
			if (Debug)  {Info << "\n - For energy group = "<< ll << "Ssi = " << Ssi <<  endl ;}
       }
     }

		// Neutrons produced from fissions in i-th group minus neutrons removed

	Sink[posEqn] = Sa[posEqn] + Ssi - chiPrompt[posEqn]*(1-precBetaTot[i])*Nu[posEqn]*Sf[posEqn] ;  // Absorbed Neutrons + Scattered out neutrons - Neutrons appearing in group i produced by fission generated by neutrons of group i
		if (Debug)  {Info << "\n - Sink["<<posEqn<<"] = Sa["<<posEqn<<"] + Ssi - chiPrompt["<<posEqn<<"]*(1-precBetaTot["<<i<<"])*Nu["<<posEqn<<"]*Sf["<<posEqn<<"] ; \n"   <<endl;}
		if (Debug)  {Info << "\n - For energy group = "<< ii << "Sa = " << Sa[posEqn] <<  endl ;}
		if (Debug)  {Info << "\n - For energy group = "<< ii << "chi... = " << chiPrompt[posEqn]*(1-precBetaTot[i])*Nu[posEqn]*Sf[posEqn] <<  endl ;}
    }
if (Debug)  {Info << "\nupdateCrossSection: END " << endl;}
}
